import { getAllPeopleUSAMembers, USAProfile } from "@/lib/pike13"
import fs from "node:fs"
import path from "node:path"
import Link from "next/link"
import ChartAndFilter from "./ChartAndFilter"
import USAStatsClient from "./USAStatsClient"

export const dynamic = "force-dynamic"

export default async function Page({ searchParams }: { searchParams?: { page?: string } }) {
  const apiKey = process.env.PIKE13_API_KEY
  // Default to hardcoded field name; env override no longer necessary
  const fieldName = "USA Fencing Membership number"

  // Try to read from cache file generated by `pnpm fetch:usa`
  let people: USAProfile[] = []
  const projectRoot = process.cwd()
  const outPath = path.join(projectRoot, "out/usa-members.json")
  const verifyPath = path.join(projectRoot, "out/usa-status.json")
  const verifyPartialPath = path.join(projectRoot, "out/usa-status.partial.json")
  type VerifyRow = {
    person_id: number
    usa_member_id: string
    sanitized_id?: string
    was_sanitized?: boolean
    id_length_ok?: boolean
    first_name?: string
    last_name?: string
    email?: string | null
    found: boolean
    match_method?: 'id' | 'name+club'
    fallback_used?: boolean
    club_matched?: boolean
    matched_club?: string
    resolved_member_id?: string
    rowText?: string
    profileUrl?: string
    error?: string
  }
  let verifyResults: VerifyRow[] = []
  let usingPartialVerify = false
  try {
    if (fs.existsSync(outPath)) {
      const raw = fs.readFileSync(outPath, "utf8")
      const parsed = JSON.parse(raw)
      people = Array.isArray(parsed) ? parsed : Array.isArray(parsed?.people) ? parsed.people : []
    }
  } catch {}

  // Try to read verification results if present
  try {
    if (fs.existsSync(verifyPath)) {
      const rawV = fs.readFileSync(verifyPath, 'utf8')
      const parsedV = JSON.parse(rawV)
      const arr = Array.isArray(parsedV) ? parsedV : Array.isArray(parsedV?.results) ? parsedV.results : []
      verifyResults = arr as VerifyRow[]
    } else if (fs.existsSync(verifyPartialPath)) {
      const rawVP = fs.readFileSync(verifyPartialPath, 'utf8')
      const parsedVP = JSON.parse(rawVP)
      const arrP = Array.isArray(parsedVP) ? parsedVP : Array.isArray(parsedVP?.results) ? parsedVP.results : []
      verifyResults = arrP as VerifyRow[]
      usingPartialVerify = true
    }
  } catch {}

  // Fallback to live API if no cache is present and API key available
  if (!people.length && apiKey) {
    people = await getAllPeopleUSAMembers({ apiKey, fieldName })
  }

  const PAGE_SIZE = 50
  const total = people.length
  const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE))
  const currentPageRaw = Number(searchParams?.page || "1")
  const page = Number.isFinite(currentPageRaw) && currentPageRaw >= 1 ? Math.min(currentPageRaw, totalPages) : 1
  const start = (page - 1) * PAGE_SIZE
  const end = Math.min(start + PAGE_SIZE, total)
  const pagePeople = people.slice(start, end)

  // Compute statistics
  const byPersonId = new Map<number, VerifyRow>()
  for (const r of verifyResults) byPersonId.set(Number(r.person_id), r)
  const totalWithId = people.filter(p => !!p.usa_member_id).length
  const totalWithoutId = total - totalWithId
  let verifiedCount = 0
  let rightlyRegisteredCount = 0 // verified via ID (Pike13 stored ID is correct)
  let wrongRegisteredVerifiedCount = 0 // ID in Pike13 is wrong, but member verified via name+club (and resolved a different ID)
  let invalidIdCount = 0
  const wrongIdByNameClub: Array<{ person_id: number; name: string; wrongId: string; rightId: string; profileUrl?: string }> = []
  for (const p of people) {
    const rec = byPersonId.get(Number(p.person_id))
    if (!p.usa_member_id) continue
    if (rec) {
      if (rec.found) {
        verifiedCount++
        if (rec.match_method === 'id') rightlyRegisteredCount++
        if (
          rec.match_method === 'name+club' &&
          rec.resolved_member_id &&
          rec.resolved_member_id !== rec.sanitized_id
        ) {
          wrongRegisteredVerifiedCount++
        }
      }
      // invalid membership number => failed length check or not found by ID
      if (rec.id_length_ok === false) {
        invalidIdCount++
      } else if (!rec.found && rec.match_method !== 'id') {
        // ID was not valid match (either not found or only found by name+club)
        invalidIdCount++
        if (rec.match_method === 'name+club' && rec.resolved_member_id && rec.resolved_member_id !== rec.sanitized_id) {
          wrongIdByNameClub.push({
            person_id: Number(p.person_id),
            name: `${p.first_name ?? ''} ${p.last_name ?? ''}`.trim(),
            wrongId: String(rec.sanitized_id ?? p.usa_member_id),
            rightId: String(rec.resolved_member_id),
            profileUrl: rec.profileUrl,
          })
        }
      }
    }
  }

  return (
    <div className="p-6 space-y-4">

      {(fs.existsSync(verifyPath) || fs.existsSync(verifyPartialPath)) ? (
        <USAStatsClient
          totals={{
            verified: verifiedCount,
            rightly: rightlyRegisteredCount,
            wrong: wrongRegisteredVerifiedCount,
            invalid: invalidIdCount,
          }}
          people={people}
          verifyResults={verifyResults}
          infoText={(
            <div className="space-y-1">
              <h1 className="text-xl font-semibold">USA Members</h1>
              <p>Field: {fieldName}</p>
              {fs.existsSync(outPath) ? (
                <p>Source: cached file at <code>out/usa-members.json</code></p>
              ) : (
                <p>Source: live Pike13 API {apiKey ? "(key present)" : "(missing API key)"}</p>
              )}
              <p>Total people: {total}</p>
              <p>Verification stats{usingPartialVerify ? ' (partial run)' : ''}:</p>
            </div>
          )}
        />
      ) : (
        <div className="text-sm text-muted-foreground space-y-1">
          <h1 className="text-xl font-semibold">USA Members</h1>
          <p>Field: {fieldName}</p>
          {fs.existsSync(outPath) ? (
            <p>Source: cached file at <code>out/usa-members.json</code></p>
          ) : (
            <p>Source: live Pike13 API {apiKey ? "(key present)" : "(missing API key)"}</p>
          )}
          <p>Total people: {total}</p>
          <p>No verification results found. Run <code>pnpm verify:usa</code> to generate stats.</p>
        </div>
      )}

      {/* Follow-up details below the chart */}
      {(fs.existsSync(verifyPath) || fs.existsSync(verifyPartialPath)) && (
        <p className="text-xs text-muted-foreground">People without member ID in Pike13: <b>{totalWithoutId}</b></p>
      )}

      {(fs.existsSync(verifyPath) || fs.existsSync(verifyPartialPath)) && wrongIdByNameClub.length > 0 && (
        <div className="mt-2">
          <p>
            Name+Club resolved wrong IDs: <b>{wrongIdByNameClub.length}</b>
          </p>
          <div className="mt-1 border rounded p-2 bg-white">
            <table className="min-w-full text-sm">
              <thead>
                <tr>
                  <th className="px-2 py-1 text-left">Person</th>
                  <th className="px-2 py-1 text-left">Wrong ID</th>
                  <th className="px-2 py-1 text-left">Right ID</th>
                  <th className="px-2 py-1 text-left">Profile</th>
                </tr>
              </thead>
              <tbody>
                {wrongIdByNameClub.slice(0, 20).map((w) => (
                  <tr key={w.person_id} className="odd:bg-white even:bg-gray-50">
                    <td className="px-2 py-1">{w.name} (#{w.person_id})</td>
                    <td className="px-2 py-1">{w.wrongId}</td>
                    <td className="px-2 py-1">{w.rightId}</td>
                    <td className="px-2 py-1">{w.profileUrl ? <a className="text-blue-600 hover:underline" href={w.profileUrl} target="_blank">Profile</a> : 'â€”'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
            {wrongIdByNameClub.length > 20 && (
              <p className="text-xs text-muted-foreground mt-1">Showing first 20. Export CSV for full list.</p>
            )}
          </div>
        </div>
      )}

      {/* Interactive table is rendered below by the client component */}
    </div>
  )
}
